#!/bin/bash


# the function add() adds the 1st and 3rd parameters together and prints the result on the screen
function add () {	
	sum=$(($1 + $3))
	echo
	echo "The sum of $1 plus $3 equals $sum."
	echo
	sleep 3
	exit
}

# the function subtract() subtracts the 1st and 3rd parameters together and prints the result on the screen
function subtract() {
	subtraction=$(($1 - $3))
	echo
	echo "The subtaction of $1 minus $3 equals $subtraction."
	echo
	sleep 3
	exit
}

# I used case to distinguish 3 situations, limiting the file to excute only when there are 3 parameters or no parameters.
# Any other num of parameters shall output err and not work.
case $# in
	# The 1st situation: when there are 3 parameters, the program would run and output different results based on different conditions.
	# I set 4 conditions, namely:
		# 1. only when $1 and $3 are integers and $2 is + sign, the function add would be called.
		# 2. only when $1 and $3 are integers and $2 is - sign, the function subtract would be called.
		# 3. error is detected when $1 or $3 is not an integer.
	        # 4. error is detected when $2 is not +/- sign.	
	3)
	       	if [[ $1 == ?(-)+([0-9]) ]] && [[ $3 == ?(-)+([0-9]) ]] && [[ $2 == "+" ]]
		then
			add $1 $2 $3
		
	       	elif [[ $1 == ?(-)+([0-9]) ]] && [[ $3 == ?(-)+([0-9]) ]] && [[ $2 == "-" ]]
		then
			subtract $1 $2 $3
		elif [[ ! $1 == ?(-)+([0-9]) ]] || [[ ! $3 == ?(-)+([0-9]) ]]
		then
			echo
			echo "Invalid parameters! Pls use integer numbers only."
			echo
		elif [[ ! $2 == "+" ]] || [[ ! $2 == "-" ]]
		then
			echo
			echo "Invalid arithmetic operator! Pls use +/- signs only."
			echo
		fi
		;;

	# The 2nd situation: when no parameters are entered, the program would be excuted based on the following scripts.
	0)
		while [ true ]  # the while loop helps user return to Menu 1 when he gets the calculation result or input wrong selections
		do
			clear
			echo "----------Menu 1----------"
			echo "C) Calculation"
			echo "X) Exit"
			read -p "Pls select an option from Menu 1: " option1

			if [ "$option1" = "c" ] || [ "$option1" = "C" ] # if c or C is chosen for the first menu, the following code would process
			then
				while [ true ]
				do
					clear
					echo "----------Menu 2----------"
					read -p "Pls enter your first integer number or X to exit: " num1

					if [[ "$num1" == ?(-)+([0-9]) ]] # Menu 2 requires user to input the 1st number,it has to be an integer
					then
						while [ true ] # if num1 is input with an integer, the loop for Menu 3 starts
						do
							clear
							echo "----------Menu 3----------"
							echo "+) Add"
							echo "-) Subtract"
							echo "X) Exit"
							read -p "Pls select an option from Menu 3: " option2

							# read user input option2, user can only input +, - or x/X
							# any other inputs would report invalid and loop back to Menu 3
							
							# the start of plus calculation
							if [[ "$option2" = "+" ]]
							then
								while [ 1 ]
								do
									clear
									echo "----------Menu 2----------"
									read -p "Pls enter your second integer number or X to exit: " num2
									# prompt the user to input the 2nd number and restrict it to be only integers
									# and if it is, the plus calculation will execute
									if [[ "$num2" == ?(-)+([0-9]) ]]
									then
										echo
										echo "The calculation is progressing..."
										sleep 3
										echo
										echo "The sum of $num1 plus $num2 is $((num1+num2))"
										echo
										sleep 3
										read -p "Press any key to go back to Menu 1..."
										break
									# if input x/X, program exits
									elif [[ "$num2" = "X" ]] || [[ "$num2" = "x" ]]
									then
										echo
										echo "The application is now shutting down..."
										sleep 3
										exit
									# any other input will report invalid and loop back to enter the 2nd number again
									else
										echo
										echo "The second number must also be an integer! pls try again."
										sleep 3
										clear
									fi
								done

								break
							# the start of minus calculation
							elif [[ "$option2" = "-"  ]]
							then
								while [ 1 ]
								do
									clear
									echo "----------Menu 2----------"
									read -p "Pls enter your second integer number or X to exit: " num3
									# prompt the user to input the 2nd number and also restrict it to be integers only
									# and if it is, the minus calculation executes
									if [[ "$num3" == ?(-)+([0-9]) ]]
									then
										echo
										echo "The calculation is progressing..."
										sleep 3
										echo
										echo "The subtraction of $num1 minus $num3 is $((num1-num3))"
										echo
                                                                		sleep 3
										read -p "Press any key to go back to Menu 1..."
										break
									elif [[ "$num3" = "X" ]] || [[ "$num3" = "x" ]]
									then
										echo
										echo "This application is now shutting down..."
										sleep 3
										exit
									else
										echo
										echo "The second number must also be an integer! pls try again."
										sleep 3
										clear
									fi
								done

								break
							elif [ "$option2" = "x" ] || [ "$option2" = "X" ]
							then
								echo
								echo "This application is now shutting down......"
								sleep 3
								exit
							else
								echo
								echo "Invalid option! pls try again."
								sleep 3
								clear
							fi
						done

						break
					elif [[ "$num1" = "X" ]] || [[ "$num1" = "x" ]] # in Menu 2, user can exit program using x/X
					then
						echo
						echo "This application is now shutting down......"
						sleep 3
						exit
					else # in Menu 2, any inputs other than integers and x/X would report invalid and loop back to Menu 2
						echo
						echo "The first number must be an integer! pls try again."
						sleep 3
						clear
					fi
				done

			elif [ "$option1" = "x" ] || [ "$option1" = "X" ] # if x or X is input in the first menu, the program exits
			then
				echo
				echo "This application is now shutting down......"
				sleep 3
				exit
			else # if any other input is used for the first menu, it reports invalid and loops back to Menu 1 for another input until user inputs correctly
				echo
				echo "Invalid option! pls try again."
				sleep 3
				clear
			fi
		done
			;;

	# The 3rd situation: when it is not 3 parameters or 0 parameters, the program will not excute and report error message.
	*)
		echo
		echo "Invalid number of parameters! you must enter 0 or 3 parameters! Pls try again."
		echo
		;;
esac
